import java.util.Scanner;

public class HammingCode {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        // Input binary data
        System.out.println("Enter binary data:");
        String data = sc.nextLine();

        int m = data.length();
        int r = 0;

        // Calculate the number of redundant bits needed
        while ((1 << r) < m + r + 1) {
            r++;
        }

        // Initialize encoded array with data and redundant bits
        int[] encoded = new int[m + r];
        for (int i = 1, d = 0; i <= encoded.length; i++) {
            if ((i & (i - 1)) == 0) { // Skip redundant bit positions
                continue;
            } else {
                encoded[i - 1] = data.charAt(d++) - '0'; // Add data bits
            }
        }

        // Calculate parity bits
        for (int i = 0; i < r; i++) {
            encoded[(1 << i) - 1] = calcParity(encoded, 1 << i);
        }

        // Display the Hamming code
        System.out.println("Hamming code: " + arrayToString(encoded));

        // Input the received code
        System.out.println("Enter received code:");
        int[] received = stringToArray(sc.nextLine());

        // Detect and correct errors
        int error = detectError(received, r);
        if (error == 0) {
            System.out.println("No error detected.");
        } else {
            System.out.println("Error at position: " + error);
            received[error - 1] ^= 1; // Correct the error
            System.out.println("Corrected code: " + arrayToString(received));
        }
        sc.close();
    }

    private static int calcParity(int[] data, int pos) {
        int parity = 0;
        for (int i = pos - 1; i < data.length; i += 2 * pos) {
            for (int j = i; j < i + pos && j < data.length; j++) {
                parity ^= data[j];
            }
        }
        return parity;
    }

    private static int detectError(int[] data, int r) {
        int error = 0;
        for (int i = 0; i < r; i++) {
            if (calcParity(data, 1 << i) != 0) {
                error += 1 << i;
            }
        }
        return error;
    }

    private static int[] stringToArray(String s) {
        return s.chars().map(c -> c - '0').toArray();
    }

    private static String arrayToString(int[] array) {
        StringBuilder sb = new StringBuilder();
        for (int bit : array) {
            sb.append(bit);
        }
        return sb.toString();
    }
}
